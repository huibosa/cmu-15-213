In the less optimized code, register %xmm0 is simply used as a temporary value,
both set and used on each loop iteration. In the more optimized code, it is
used more in the manner of variable acc in combine4, accumulating the product
of the vector elements. The difference with combine4, however, is that location
dest is updated on each iteration by the second vmovsd instruction.


void combine3w(vec_ptr v, data_t *dest) {
    long i;
    long length = vec_length(v);
    data_t *data = get_vec_start(v);
    data_t acc = IDENT;

    /* Initialize in event length <= 0 */
    *dest = acc;

    for (i = 0; i < length; i++) {
        acc = acc OP data[i];
        *dest = acc;
    }
}

The two versions of combine3 will have identical functionality, even with
memory aliasing.


This transformation can be made without changing the program behavior, because,
with the exception of the first iteration, the value read from dest at the
beginning of each iteration will be the same value written to this register at
the end of the previous iteration. Therefore, the combining instruction can
simply use the value already in %xmm0 at the beginning of the loop.
