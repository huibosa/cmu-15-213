int len(char *s) { return strlen(s); }

void iptoa(char *s, long *p) {
  long val = *p;
  sprintf(s, "%ld", val);
}

int intlen(long x) {
  long v;
  char buf[12];
  v = x;
  iptoa(buf, &v);
  return len(buf);
}

(a) With protector

intlen:
  subq $40, %rsp
  movq %rdi, 24(%rsp)
  leaq 24(%rsp), %rsi
  movq %rsp, %rdi
  call iptoa

(b) With protector

intlen:
  subq $56, %rsp
  movq %fs:40, %rax
  movq %rax, 40(%rsp)
  xorl %eax, %eax
  movq %rdi, 8(%rsp)
  leaq 8(%rsp), %rsi
  leaq 16(%rsp), %rdi
  call iptoa

A. For both versions: What are the positions in the stack frame for buf, v, and
(when present) the canary value?
-------------------------------------------------------------------------------
without protector:
  buf:  (%rsp)
  v:    24(%rsp)

withprotector:
  buf:            16(%rsp)
  v:              8(%rsp)
  canary value:   40(%rsp)


B. How does the rearranged ordering of the local variables in the protected
code provide greater security against a buffer overrun attack?
---------------------------------------------------------------------------
In the protected code, local variable v is positioned closer to the top of the
stack than buf, and so an overrun of buf will not corrupt the value of v.
