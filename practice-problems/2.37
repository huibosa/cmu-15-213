**both data types int and size_t are 32 bits.**
**both data types int and size_t are 32 bits.**
**both data types int and size_t are 32 bits.**
**both data types int and size_t are 32 bits.**
**both data types int and size_t are 32 bits.**
**both data types int and size_t are 32 bits.**


void* copy_elements(void* ele_src[], int ele_count, int ele_size) {
  // Allocate buffer for ele_cnt objects, each of ele_size bytes
  // and copy from locations designated by ele_src
  void* restult = malloc(ele_count * ele_size);
  if (restult == NULL) {
    return NULL;
  }
  void* next = restult;

  for (int i = 0; i < ele_count; i++) {
    memcpy(next, ele_src[i], ele_size);
    next += ele_size;
  }
  return restult;
}

A. Does your code provide any improvement over the original?
------------------------------------------------------------
This change does not help at all. Even though the computation of `asize` will
be accurate, the call to `malloc` will cause this value to be converted to a
32-bit unsigned number, and so the same overflow conditions will occur.

B. How would you change the code to eliminate the vulnerability?
----------------------------------------------------------------

uint64_t required_size = ele_count * (uint64_t)ele_size;
size_t   request_size  = (size_t)required_size;
if (request_size != required_size) {
  // Overflow must has occured. Abort operation
  return NULL;
}

