With high-order bit indexing, each contiguous array chunk consists of 2^t
blocks, where t is the number of tag bits. Thus, the first 2^t contiguous blocks
of the array would map to set 0, the next 2t blocks would map to set 1, and
so on.

-----------------------------------------------------------------------------------------

(S, E, B, m) = (512, 1, 32, 32):

t = m - s - b
  = 32 - 9 - 5
  = 18

int array[4096];

for (i = 0; i < 4096; i++)
    sum += array[i];


For a direct-mapped cache where (S, E, B, m) = (512, 1, 32, 32),

1. the cache capacity is 512 32-byte blocks with t = 18 tag bits in each cache line.

2. Thus, the first 2^18 blocks in the array would map to set 0, the next 2^18 blocks to set 1.

3. Since our array consists of only (4,096 Ã— 4)/32 = 512 blocks, all of the blocks in the array map to set 0.

4. Thus, the cache will hold at most 1 array block at any point in time, even though
  the array is small enough to fit entirely in the cache. Clearly, using high-order
  bit indexing makes poor use of the cache.
