Consider the following scenario. Procedure get_line is called with the return
address equal to 0x400776 and register %rbx equal to 0x0123456789ABCDEF. You
type in the string

0123456789012345678901234

The program terminates with a segmentation fault. You run gdb and determine
that the error occurs during the execution of the ret instruction of get_line.

//////////////////////////////////////////////////////////////////////////////////
/* This is very low-quality code.
It is intended to illustrate bad programming practices.
See Practice Problem 3.46. */
char* get_line() {
  char  buf[4];
  char* result;
  gets(buf);
  result = malloc(strlen(buf));
  strcpy(result, buf);
  return result;
}

char *get_line()
0000000000400720 <get_line>:
    400720: 53                        push %rbx
    400721: 48 83 ec 10               sub $0x10,%rsp
# Diagram stack at this point
    400725: 48 89 e7                  mov %rsp,%rdi
    400728: e8 73 ff ff ff            callq 4006a0 <gets>
# Modify diagram to show stack contents at this point
//////////////////////////////////////////////////////////////////////////////////



A. Fill in the diagram that follows, indicating as much as you can about the stack
just after executing the instruction at line 3 in the disassembly. Label the
quantities stored on the stack (e.g., “Return address”) on the right, and their
hexadecimal values (if known) within the box. Each box represents 8 bytes.
Indicate the position of %rsp. Recall that the ASCII codes for characters 0–9
are 0x30–0x39.
----------------------------------------------------------------------------------


+-------------------------+
| 00 00 00 00 00 40 00 76 |   Return address
+-------------------------+
| 01 23 45 67 89 AB CD EF |   Saved %rbx
+-------------------------+
|                         |
+-------------------------+
|                         |   <-- buf = %rsp
+-------------------------+


B. Modify your diagram to show the effect of the call to gets (line 5).
-----------------------------------------------------------------------

0123456789012345678901234

+-------------------------+
| 00 00 00 00 00 40 00 34 |   Return address
+-------------------------+
| 33 32 31 30 39 38 37 36 |   Saved %rbx
+-------------------------+
| 35 34 33 32 31 30 39 38 |
+-------------------------+
| 37 36 35 34 33 32 31 30 |   <-- buf = %rsp
+-------------------------+



C. To what address does the program attempt to return?
------------------------------------------------------
The program is attempting to return to address Ox040034. The low-order 2
bytes were overwritten by the code,fpr character '4' and the terminating null
character,


D. What register(s) have corrupted value(s) when get_line returns?
------------------------------------------------------------------
%rbx and 


E. Besides the potential for buffer overflow, what two other things are wrong
with the code for get_line?
-----------------------------------------------------------------------------
The call to malloc should have had strlen(buf)+1 as its argument, and the
code should also check that the returned value is not equal to NULL.
