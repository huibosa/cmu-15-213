irmovq $0x123, %rax
irmovq $0x321, %rdx
xorq %rcx, %rcx        # CC = 100
cmovne %rax, %rdx      # Not transferred
addq %rdx, %rdx        # Should be 0x642
halt

F D E M W
  F D E M W
    F D E M |W|
      F D E |M| W
        F D |E| M W


This code initializes register %rdx to 0x321. The conditional data transfer
does not take place, and so the final addq instruction should double the value
in %rdx to 0x642. With the altered design, however, the conditional move source
value 0x321 gets forwarded into ALU input valA, while input valB correctly gets
operand value 0x123. These inputs get added to produce result 0x444.
