long dw_loop(long x) {
  long  y = x * x;
  long* p = &x;
  long  n = 2 * x;
  do {
    x += y;
    (*p)++;
    n--;
  } while (n > 0);
  return x;
}

dw_loop:
  movq  %rdi, %rax          # rax = x
  movq  %rdi, %rcx          # rcx = x
  imulq %rdi, %rcx          # rcx = x * x
  leaq  (%rdi, %rdi), %rdx  # rdx = 2 * x
.L2:
  leaq  1(%rcx, %rax), %rax # rax = rax + rcx + 1
  subq  $1, %rdx            # rdx = rdx - 1
  testq %rdx, %rdx          # test (rdx == 0)
  jg    .L2                 # if (rdx > 0); goto .L2
  ret;  ret


A. Which registers are used to hold program values x, y, and n?
---------------------------------------------------------------
x: %rax
y: %rcx
n: %rdx

B. How has the compiler eliminated the need for pointer variable p and the
pointer dereferencing implied by the expression (*p)++?
--------------------------------------------------------------------------
The compiler determines that pointer p always points to x, and hence the
expression (â€¢p)++ simply increments x. It combines this incrementing by 1
with the increment by y, via the leaq instruction of line 7.

C. Add annotations to the assembly code describing the operation of the pro
gram, similar to those shown in Figure 3.19(c).
---------------------------------------------------------------------------

