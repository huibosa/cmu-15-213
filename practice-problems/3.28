fun_b:
  movl    $64,  %edx    # temp1 = 64
  movl    $0,   %eax    # ret = 0
.L10:
  movq    %rdi, %rcx    # temp2 = x
  andl    $1,   %ecx    # temp2 &= 1
  addq    %rax, %rax    # ret *= 2
  orq     %rcx, %rax    # ret |= temp2
  shrq    %rdi          # x >>= 1
  subq    $1,   %rdx    # temp1--
  jne     .L10          # temp1 != 0
  rep; ret


A. Use the assembly-code version to fill in the missing parts of the C code.
----------------------------------------------------------------------------
long fun_b(unsigned long x) {
  long val = 0;
  long i;
  for (i = 64; i >= 0; i--, x >>= 1) {
    val = (2 * val) | (x & 1);
  }
  return val;
}

B. Explain why there is neither an initial test before the loop nor an initial
jump to the test portion of the loop.
----------------------------------------------------------------------------
The code was generated using the guarded-do transformation, but the compiler
detecte that, since i is initialized to 64, it will satisfy the test i != 0,
and therefore the initial test is not required.

C. Describe in English what this function computes.
---------------------------------------------------
This code reverses the bits in x, creating a mirror image. It does this by
shifting the bits of x from left to right, and then filling these bits in as it
shifts val from right to left.
